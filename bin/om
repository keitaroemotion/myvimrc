#!/usr/bin/env python3
#
# org mode
#

import datetime
import os
import pathlib
import sys

from datetime import datetime

args = sys.argv

homedir = os.path.expanduser("~")
todo_file = f"{homedir}/.todo"

#
# list
#   - order by date
#   - color red expired todo
#   
# add
# modify
# delete
#

# om                               ... list todos
# om a '[YYYYMMDD|MMDD]' 'content' ... add todo
# om m (interactively look for todo and let user modify it)
# om d (interactively look for todo and let user modify it)

#
# PROTOCOL
#
# YYYY-MM-DD [task name]


def list_todos():
    pass

def add_todo():
    pass

def modify_todo():
    pass

def delete_todo():
    pass

def open_todo_config_file(todo_file):
    import subprocess 
    command = f"vim {todo_file}"
    subprocess.run(command, shell=True)

def _read_file(file_txt):
    list = []
    if not(os.path.exists(file_txt)):
        pathlib.Path(file_txt).touch()

    with open(file_txt, 'r') as file:
        file_content = file.read()

    for line in file_content.split('\n'):
        line = line.strip()
        if(line != ''):
            list.append(line)

    return list

def _prepare_list(todo_file):
    list = _read_file(todo_file)
   
    another_list = []
    for line in list:
        datestr, *content = line.split(' ')
        todo_date    = datetime.strptime(datestr, "%Y-%m-%d").date()
        todo_content = ' '.join(content)

        another_list.append([todo_date, todo_content])

    return sorted(another_list, key=lambda x: x[0])

def show_todos(todo_file):
    today = datetime.now().date()
    red_text    = "\033[91m"
    reset_color = "\033[0m"
 
    print()
    another_list = _prepare_list(todo_file)
    for todo_date, todo_content in another_list:
        if(todo_date <= today):
            print(f"{red_text}{todo_date} {todo_content}{reset_color}")
        else: 
            print(f"{todo_date} {todo_content}")
    print()

if(len(sys.argv) < 2):
    show_todos(todo_file)
    sys.exit()

#
# DETAILED OPERATION
#
op = sys.argv[1] 

if(op not in ['a', 'm', 'd', 'o']):
    sys.exit()

if(op == 'o'):
    open_todo_config_file(todo_file)
    
