#!/usr/bin/env python3

#
# git previous / next
#
import subprocess
import sys

direction = ''

def show_help():
    print('')
    print('git-move next ... move to next branch')
    print('git-move prev ... move to prev branch')
    print('git-move help ... show help menu')
    print('')

if(len(sys.argv) > 1):
    if(sys.argv[1] == 'prev'):
        direction = 'prev'
    elif(sys.argv[1] == 'next'):
        direction = 'next'
    else:
        show_help()
else:
    show_help()

def list_branches():
    try:
        # Run 'git branch' command to list branches
        result = subprocess.run(['git', 'branch'], stdout=subprocess.PIPE, text=True, check=True)
        branches = result.stdout.strip().split('\n')
        return branches
    except subprocess.CalledProcessError:
        print("Error: Unable to list branches.")
        return []

def get_current_branch():
    try:
        # Run 'git symbolic-ref --short HEAD' to get the current branch
        result = subprocess.run(['git', 'symbolic-ref', '--short', 'HEAD'], stdout=subprocess.PIPE, text=True, check=True)
        current_branch = result.stdout.strip()
        return current_branch
    except subprocess.CalledProcessError:
        print("Error: Unable to get the current branch.")
        return None

current_branch = get_current_branch()
branches       = list_branches()
i = 0
ci = 0
if branches:
    for branch in branches:
        if(branch == f"* {current_branch}"):
          ci = i
        i = i + 1

branches = [x.replace('*', '').strip() for x in branches]

def get_next_branch(branches, ci):
    if(ci+1 < len(branches)):
        return branches[ci+1]
    else:
        return branches[0]

def get_prev_branch(branches, ci):
    if(ci-1 >= 0):
        return branches[ci-1]
    else:
        return branches[len(branches)-1]

if(direction == 'next'):
    next_branch = get_next_branch(branches, ci).strip()
    subprocess.run(['git', 'checkout', next_branch], stdout=subprocess.PIPE, text=True, check=True)
else:
    prev_branch = get_prev_branch(branches, ci).strip()
    subprocess.run(['git', 'checkout', prev_branch], stdout=subprocess.PIPE, text=True, check=True)
